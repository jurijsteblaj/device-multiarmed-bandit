
// Code generated by stanc f556d0df
#include <stan/model/model_header.hpp>
namespace GP_model_namespace {

template <typename T, typename S>
std::vector<T> resize_to_match__(std::vector<T>& dst, const std::vector<S>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, -1>
resize_to_match__(Eigen::Matrix<T, -1, -1>& dst, const Eigen::Matrix<T, -1, -1>& src) {
  dst.resize(src.rows(), src.cols());
  return dst;
}

template <typename T>
Eigen::Matrix<T, 1, -1>
resize_to_match__(Eigen::Matrix<T, 1, -1>& dst, const Eigen::Matrix<T, 1, -1>& src) {
  dst.resize(src.size());
  return dst;
}

template <typename T>
Eigen::Matrix<T, -1, 1>
resize_to_match__(Eigen::Matrix<T, -1, 1>& dst, const Eigen::Matrix<T, -1, 1>& src) {
  dst.resize(src.size());
  return dst;
}
std::vector<double> to_doubles__(std::initializer_list<double> x) {
  return x;
}

std::vector<stan::math::var> to_vars__(std::initializer_list<stan::math::var> x) {
  return x;
}

inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math; 

static int current_statement__ = 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'models/GP.stan', line 36, column 2 to column 20)",
                                                      " (in 'models/GP.stan', line 37, column 2 to column 22)",
                                                      " (in 'models/GP.stan', line 38, column 2 to column 22)",
                                                      " (in 'models/GP.stan', line 56, column 2 to column 87)",
                                                      " (in 'models/GP.stan', line 57, column 2 to column 30)",
                                                      " (in 'models/GP.stan', line 59, column 4 to column 51)",
                                                      " (in 'models/GP.stan', line 58, column 2 to line 59, column 51)",
                                                      " (in 'models/GP.stan', line 42, column 2 to line 43, column 65)",
                                                      " (in 'models/GP.stan', line 44, column 2 to column 47)",
                                                      " (in 'models/GP.stan', line 48, column 2 to column 36)",
                                                      " (in 'models/GP.stan', line 49, column 2 to column 23)",
                                                      " (in 'models/GP.stan', line 50, column 2 to column 23)",
                                                      " (in 'models/GP.stan', line 52, column 2 to column 53)",
                                                      " (in 'models/GP.stan', line 27, column 2 to column 17)",
                                                      " (in 'models/GP.stan', line 28, column 2 to column 12)",
                                                      " (in 'models/GP.stan', line 29, column 2 to column 14)",
                                                      " (in 'models/GP.stan', line 31, column 2 to column 25)",
                                                      " (in 'models/GP.stan', line 32, column 2 to column 28)",
                                                      " (in 'models/GP.stan', line 5, column 4 to column 22)",
                                                      " (in 'models/GP.stan', line 6, column 4 to column 22)",
                                                      " (in 'models/GP.stan', line 7, column 4 to column 18)",
                                                      " (in 'models/GP.stan', line 9, column 6 to line 10, column 70)",
                                                      " (in 'models/GP.stan', line 11, column 6 to column 49)",
                                                      " (in 'models/GP.stan', line 13, column 6 to column 60)",
                                                      " (in 'models/GP.stan', line 14, column 6 to column 69)",
                                                      " (in 'models/GP.stan', line 15, column 6 to column 64)",
                                                      " (in 'models/GP.stan', line 16, column 6 to column 47)",
                                                      " (in 'models/GP.stan', line 17, column 6 to column 65)",
                                                      " (in 'models/GP.stan', line 18, column 6 to line 19, column 67)",
                                                      " (in 'models/GP.stan', line 20, column 6 to column 43)",
                                                      " (in 'models/GP.stan', line 8, column 4 to line 21, column 5)",
                                                      " (in 'models/GP.stan', line 22, column 4 to column 14)",
                                                      " (in 'models/GP.stan', line 4, column 67 to line 23, column 3)"};


template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type, -1, 1>
gp_pred_rng(const std::vector<T0__>& x2,
            const Eigen::Matrix<T1__, -1, 1>& y1,
            const std::vector<T2__>& x1, const T3__& alpha, const T4__& rho,
            const T5__& sigma, const T6__& delta, RNG& base_rng__,
            std::ostream* pstream__,
            std::function<stan::math::matrix_d(
              const stan::math::matrix_d&,
              const stan::math::matrix_d&)> multiply,
            std::function<stan::math::matrix_d(
              const stan::math::matrix_d&)> cholesky_decompose) {
  using local_scalar_t__ = typename boost::math::tools::promote_args<T0__,
          T1__,
          T2__,
          T3__,
          T4__, typename boost::math::tools::promote_args<T5__,
          T6__>::type>::type;
  const static bool propto__ = true;
  (void) propto__;
  
  try {
    int N1;
    
    current_statement__ = 19;
    N1 = rows(y1);
    int N2;
    
    current_statement__ = 20;
    N2 = size(x2);
    current_statement__ = 21;
    validate_non_negative_index("f2", "N2", N2);
    Eigen::Matrix<local_scalar_t__, -1, 1> f2;
    f2 = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
    
    current_statement__ = 21;
    for (size_t sym1__ = 1; sym1__ <= N2; ++sym1__) {
      current_statement__ = 21;
      assign(f2, cons_list(index_uni(sym1__), nil_index_list()),
        std::numeric_limits<double>::quiet_NaN(), "assigning variable f2");}
    {
      current_statement__ = 22;
      validate_non_negative_index("K", "N1", N1);
      current_statement__ = 22;
      validate_non_negative_index("K", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N1);
      
      current_statement__ = 22;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 22;
        for (size_t sym2__ = 1; sym2__ <= N1; ++sym2__) {
          current_statement__ = 22;
          assign(K,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(), "assigning variable K");
        }}
      current_statement__ = 22;
      assign(K, nil_index_list(),
        add(cov_exp_quad(x1, alpha, rho),
          diag_matrix(rep_vector(square(sigma), N1))), "assigning variable K");
      current_statement__ = 23;
      validate_non_negative_index("L_K", "N1", N1);
      current_statement__ = 23;
      validate_non_negative_index("L_K", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, -1> L_K;
      L_K = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N1);
      
      current_statement__ = 23;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 23;
        for (size_t sym2__ = 1; sym2__ <= N1; ++sym2__) {
          current_statement__ = 23;
          assign(L_K,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable L_K");}}
      current_statement__ = 23;
      assign(L_K, nil_index_list(), cholesky_decompose(K),
        "assigning variable L_K");
      current_statement__ = 24;
      validate_non_negative_index("L_K_div_y1", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, 1> L_K_div_y1;
      L_K_div_y1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N1);
      
      current_statement__ = 24;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 24;
        assign(L_K_div_y1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable L_K_div_y1");}
      current_statement__ = 24;
      assign(L_K_div_y1, nil_index_list(), mdivide_left_tri_low(L_K, y1),
        "assigning variable L_K_div_y1");
      current_statement__ = 25;
      validate_non_negative_index("K_div_y1", "N1", N1);
      Eigen::Matrix<local_scalar_t__, -1, 1> K_div_y1;
      K_div_y1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N1);
      
      current_statement__ = 25;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 25;
        assign(K_div_y1, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable K_div_y1");}
      current_statement__ = 25;
      assign(K_div_y1, nil_index_list(),
        transpose(mdivide_right_tri_low(transpose(L_K_div_y1), L_K)),
        "assigning variable K_div_y1");
      current_statement__ = 26;
      validate_non_negative_index("k_x1_x2", "N1", N1);
      current_statement__ = 26;
      validate_non_negative_index("k_x1_x2", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> k_x1_x2;
      k_x1_x2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N2);
      
      current_statement__ = 26;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 26;
        for (size_t sym2__ = 1; sym2__ <= N2; ++sym2__) {
          current_statement__ = 26;
          assign(k_x1_x2,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable k_x1_x2");}}
      current_statement__ = 26;
      assign(k_x1_x2, nil_index_list(), cov_exp_quad(x1, x2, alpha, rho),
        "assigning variable k_x1_x2");
      current_statement__ = 27;
      validate_non_negative_index("f2_mu", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, 1> f2_mu;
      f2_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N2);
      
      current_statement__ = 27;
      for (size_t sym1__ = 1; sym1__ <= N2; ++sym1__) {
        current_statement__ = 27;
        assign(f2_mu, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable f2_mu");}
      current_statement__ = 27;
      assign(f2_mu, nil_index_list(), multiply(transpose(k_x1_x2), K_div_y1),
        "assigning variable f2_mu");
      current_statement__ = 28;
      validate_non_negative_index("v_pred", "N1", N1);
      current_statement__ = 28;
      validate_non_negative_index("v_pred", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> v_pred;
      v_pred = Eigen::Matrix<local_scalar_t__, -1, -1>(N1, N2);
      
      current_statement__ = 28;
      for (size_t sym1__ = 1; sym1__ <= N1; ++sym1__) {
        current_statement__ = 28;
        for (size_t sym2__ = 1; sym2__ <= N2; ++sym2__) {
          current_statement__ = 28;
          assign(v_pred,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable v_pred");}}
      current_statement__ = 28;
      assign(v_pred, nil_index_list(), mdivide_left_tri_low(L_K, k_x1_x2),
        "assigning variable v_pred");
      current_statement__ = 29;
      validate_non_negative_index("cov_f2", "N2", N2);
      current_statement__ = 29;
      validate_non_negative_index("cov_f2", "N2", N2);
      Eigen::Matrix<local_scalar_t__, -1, -1> cov_f2;
      cov_f2 = Eigen::Matrix<local_scalar_t__, -1, -1>(N2, N2);
      
      current_statement__ = 29;
      for (size_t sym1__ = 1; sym1__ <= N2; ++sym1__) {
        current_statement__ = 29;
        for (size_t sym2__ = 1; sym2__ <= N2; ++sym2__) {
          current_statement__ = 29;
          assign(cov_f2,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())),
            std::numeric_limits<double>::quiet_NaN(),
            "assigning variable cov_f2");}}
      current_statement__ = 29;
      assign(cov_f2, nil_index_list(),
        add(
          subtract(cov_exp_quad(x2, alpha, rho),
            multiply(transpose(v_pred), v_pred)),
          diag_matrix(rep_vector(delta, N2))), "assigning variable cov_f2");
      current_statement__ = 30;
      assign(f2, nil_index_list(),
        multi_normal_rng(f2_mu, cov_f2, base_rng__), "assigning variable f2");
    }
    current_statement__ = 32;
    return f2;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}

struct gp_pred_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename RNG>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__,
T4__, typename boost::math::tools::promote_args<T5__,
T6__>::type>::type, -1, 1>
operator()(const std::vector<T0__>& x2, const Eigen::Matrix<T1__, -1, 1>& y1,
           const std::vector<T2__>& x1, const T3__& alpha, const T4__& rho,
           const T5__& sigma, const T6__& delta, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return gp_pred_rng(x2, y1, x1, alpha, rho, sigma, delta, base_rng__,
         pstream__);
}
};

class GP_model : public model_base_crtp<GP_model> {

 private:
  int pos__;
  int N;
  std::vector<double> x;
  Eigen::Matrix<double, -1, 1> y;
  int N_predict;
  std::vector<double> x_predict;
  std::function<stan::math::matrix_d(
    const stan::math::matrix_d&,
    const stan::math::matrix_d&)> multiply;
  std::function<stan::math::matrix_d(const stan::math::matrix_d&)> cholesky;
 
 public:
  ~GP_model() { }
  
  std::string model_name() const { return "GP_model"; }
  
  GP_model(stan::io::var_context& context__,
           std::function<stan::math::matrix_d(
             const stan::math::matrix_d&,
             const stan::math::matrix_d&)> multiply_func
               = [](const auto& a, const auto& b){ return stan::math::multiply(a, b); },
           std::function<stan::math::matrix_d(const stan::math::matrix_d&)> cholesky_func
            = [](const auto& a){ return stan::math::cholesky_decompose(a); },
           unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr)
           : model_base_crtp(0), multiply(multiply_func), cholesky(cholesky_func) {
    typedef double local_scalar_t__;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "GP_model_namespace::GP_model";
    (void) function__;  // suppress unused var warning
    
    try {
      
      pos__ = 1;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 15;
      validate_non_negative_index("x", "N", N);
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N));
      x = std::vector<double>(N, 0);
      
      current_statement__ = 15;
      assign(x, nil_index_list(), context__.vals_r("x"),
        "assigning variable x");
      current_statement__ = 16;
      validate_non_negative_index("y", "N", N);
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = Eigen::Matrix<double, -1, 1>(N);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 16;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 16;
          pos__ = (pos__ + 1);}
      }
      context__.validate_dims("data initialization","N_predict","int",
          context__.to_vec());
      
      current_statement__ = 17;
      N_predict = context__.vals_i("N_predict")[(1 - 1)];
      current_statement__ = 18;
      validate_non_negative_index("x_predict", "N_predict", N_predict);
      context__.validate_dims("data initialization","x_predict","double",
          context__.to_vec(N_predict));
      x_predict = std::vector<double>(N_predict, 0);
      
      current_statement__ = 18;
      assign(x_predict, nil_index_list(), context__.vals_r("x_predict"),
        "assigning variable x_predict");
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "N_predict", N_predict, 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename T__>
  T__ log_prob(std::vector<T__>& params_r__, std::vector<int>& params_i__,
               std::ostream* pstream__ = 0) const {
    typedef T__ local_scalar_t__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "GP_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    
    try {
      local_scalar_t__ rho;
      
      current_statement__ = 1;
      rho = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        rho = stan::math::lb_constrain(rho, 0, lp__);
      } else {
        current_statement__ = 1;
        rho = stan::math::lb_constrain(rho, 0);
      }
      local_scalar_t__ alpha;
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0, lp__);
      } else {
        current_statement__ = 2;
        alpha = stan::math::lb_constrain(alpha, 0);
      }
      local_scalar_t__ sigma;
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 3;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      {
        current_statement__ = 8;
        validate_non_negative_index("cov", "N", N);
        current_statement__ = 8;
        validate_non_negative_index("cov", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov;
        cov = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        
        current_statement__ = 8;
        for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 8;
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 8;
            assign(cov,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              std::numeric_limits<double>::quiet_NaN(),
              "assigning variable cov");}}
        current_statement__ = 8;
        assign(cov, nil_index_list(),
          add(cov_exp_quad(x, alpha, rho),
            diag_matrix(rep_vector(square(sigma), N))),
          "assigning variable cov");
        current_statement__ = 9;
        validate_non_negative_index("L_cov", "N", N);
        current_statement__ = 9;
        validate_non_negative_index("L_cov", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_cov;
        L_cov = Eigen::Matrix<local_scalar_t__, -1, -1>(N, N);
        
        current_statement__ = 9;
        for (size_t sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          for (size_t sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 9;
            assign(L_cov,
              cons_list(index_uni(sym1__),
                cons_list(index_uni(sym2__), nil_index_list())),
              std::numeric_limits<double>::quiet_NaN(),
              "assigning variable L_cov");}}
        current_statement__ = 9;
        assign(L_cov, nil_index_list(), cholesky_decompose(cov),
          "assigning variable L_cov");
        current_statement__ = 10;
        lp_accum__.add(inv_gamma_log<propto__>(rho, 8.91924, 34.5805));
        current_statement__ = 11;
        lp_accum__.add(normal_log<propto__>(alpha, 0, 2));
        current_statement__ = 12;
        lp_accum__.add(normal_log<propto__>(sigma, 0, 1));
        current_statement__ = 13;
        lp_accum__.add(
          multi_normal_cholesky_log<propto__>(y, rep_vector(0, N), L_cov));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob() 
    
  template <typename RNG>
  void write_array(RNG& base_rng__, std::vector<double>& params_r__,
                   std::vector<int>& params_i__, std::vector<double>& vars__,
                   bool emit_transformed_parameters__ = true,
                   bool emit_generated_quantities__ = true,
                   std::ostream* pstream__ = 0) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "GP_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    
    try {
      double rho;
      
      current_statement__ = 1;
      rho = in__.scalar();
      current_statement__ = 1;
      rho = stan::math::lb_constrain(rho, 0);
      double alpha;
      
      current_statement__ = 2;
      alpha = in__.scalar();
      current_statement__ = 2;
      alpha = stan::math::lb_constrain(alpha, 0);
      double sigma;
      
      current_statement__ = 3;
      sigma = in__.scalar();
      current_statement__ = 3;
      sigma = stan::math::lb_constrain(sigma, 0);
      vars__.push_back(rho);
      vars__.push_back(alpha);
      vars__.push_back(sigma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      current_statement__ = 4;
      validate_non_negative_index("f_predict", "N_predict", N_predict);
      Eigen::Matrix<double, -1, 1> f_predict;
      f_predict = Eigen::Matrix<double, -1, 1>(N_predict);
      
      current_statement__ = 4;
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        current_statement__ = 4;
        assign(f_predict, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable f_predict");}
      current_statement__ = 4;
      assign(f_predict, nil_index_list(),
        gp_pred_rng(x_predict, y, x, alpha, rho, sigma,
          1e-10, base_rng__, pstream__, multiply, cholesky),
          "assigning variable f_predict");
      current_statement__ = 5;
      validate_non_negative_index("y_predict", "N_predict", N_predict);
      Eigen::Matrix<double, -1, 1> y_predict;
      y_predict = Eigen::Matrix<double, -1, 1>(N_predict);
      
      current_statement__ = 5;
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        current_statement__ = 5;
        assign(y_predict, cons_list(index_uni(sym1__), nil_index_list()),
          std::numeric_limits<double>::quiet_NaN(),
          "assigning variable y_predict");}
      current_statement__ = 7;
      for (size_t n = 1; n <= N_predict; ++n) {
        current_statement__ = 6;
        assign(y_predict, cons_list(index_uni(n), nil_index_list()),
          normal_rng(f_predict[(n - 1)], sigma, base_rng__),
          "assigning variable y_predict");}
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        vars__.push_back(f_predict[(sym1__ - 1)]);}
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        vars__.push_back(y_predict[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array() 
    
  void transform_inits(const stan::io::var_context& context__,
                       std::vector<int>& params_i__,
                       std::vector<double>& vars__, std::ostream* pstream__) const {
    typedef double local_scalar_t__;
    vars__.resize(0);
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      
      pos__ = 1;
      double rho;
      
      current_statement__ = 1;
      rho = context__.vals_r("rho")[(1 - 1)];
      current_statement__ = 1;
      rho = stan::math::lb_free(rho, 0);
      double alpha;
      
      current_statement__ = 2;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 2;
      alpha = stan::math::lb_free(alpha, 0);
      double sigma;
      
      current_statement__ = 3;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      current_statement__ = 3;
      sigma = stan::math::lb_free(sigma, 0);
      vars__.push_back(rho);
      vars__.push_back(alpha);
      vars__.push_back(sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits() 
    
  void get_param_names(std::vector<std::string>& names__) const {
    
    names__.resize(0);
    names__.push_back("rho");
    names__.push_back("alpha");
    names__.push_back("sigma");
    names__.push_back("f_predict");
    names__.push_back("y_predict");
    } // get_param_names() 
    
  void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.resize(0);
    std::vector<size_t> dims__;
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_predict);
    dimss__.push_back(dims__);
    dims__.resize(0);
    dims__.push_back(N_predict);
    dimss__.push_back(dims__);
    dims__.resize(0);
    
    } // get_dims() 
    
  void constrained_param_names(std::vector<std::string>& param_names__,
                               bool emit_transformed_parameters__ = true,
                               bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "rho");
    param_names__.push_back(std::string() + "alpha");
    param_names__.push_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.push_back(std::string() + "f_predict" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.push_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  void unconstrained_param_names(std::vector<std::string>& param_names__,
                                 bool emit_transformed_parameters__ = true,
                                 bool emit_generated_quantities__ = true) const {
    
    param_names__.push_back(std::string() + "rho");
    param_names__.push_back(std::string() + "alpha");
    param_names__.push_back(std::string() + "sigma");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.push_back(std::string() + "f_predict" + '.' + std::to_string(sym1__));
        }}
      for (size_t sym1__ = 1; sym1__ <= N_predict; ++sym1__) {
        {
          param_names__.push_back(std::string() + "y_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_predict\",\"type\":{\"name\":\"vector\",\"length\":" << N_predict << "},\"block\":\"generated_quantities\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" << N_predict << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_predict\",\"type\":{\"name\":\"vector\",\"length\":" << N_predict << "},\"block\":\"generated_quantities\"},{\"name\":\"y_predict\",\"type\":{\"name\":\"vector\",\"length\":" << N_predict << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool emit_transformed_parameters__ = true,
                     bool emit_generated_quantities__ = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng__, params_r_vec, params_i_vec, vars_vec,
          emit_transformed_parameters__, emit_generated_quantities__, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    template <bool propto__, bool jacobian__, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto__,jacobian__,T_>(vec_params_r, vec_params_i, pstream);
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }

};
}
// typedef GP_model_namespace::GP_model stan_model;

// #ifndef USING_R

// // Boilerplate
// stan::model::model_base& new_model(
//         stan::io::var_context& data_context,
//         unsigned int seed,
//         std::ostream* msg_stream) {
//   stan_model* m = new stan_model(data_context, seed, msg_stream);
//   return *m;
// }

// #endif


